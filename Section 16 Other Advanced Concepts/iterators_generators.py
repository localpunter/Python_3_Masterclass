# Iterators - an object which allows a programmer to traverse through all the elements of a collection

my_list = [1, 2, 3, 4, 5, 6, 7]

for element in my_list:
    print(element)

my_iter = iter(my_list)  # iter() returns an interator object
print(type(my_iter))


# in Python 2 and 3, it returns the elements of a sequence one by one; raises StopIteration when the sequence is exhausted
print(next(my_iter))
print(next(my_iter))
print(next(my_iter))
print(next(my_iter))
print(next(my_iter))
print(next(my_iter))
print(next(my_iter))
# print(next(my_iter)) # returns an error as 8 does not exist in the list


# Generators - special routines that can be used to control the iteration behavior of a loop; defined using the "def" keyword;
def my_gen(x, y):  # creating a generator function
    for i in range(x):
        print("\ni is %d" % i)
        print("y is %d" % y)
        yield i * y  # yields the values one at a time; traversing a sequence up to a certain point, getting the result and suspending the execution


my_object = my_gen(15, 3)  # creating a generator object
print(type(my_object))

# manually yield the next element returned by the my_gen() function; raises StopIteration when the sequence is exhausted
print(next(my_object))
print(next(my_object))
print(next(my_object))
print(next(my_object))
print(next(my_object))
print(next(my_object))
print(next(my_object))
print(next(my_object))
print(next(my_object))
print(next(my_object))
print(next(my_object))
print(next(my_object))
print(next(my_object))
print(next(my_object))
print(next(my_object))


# creating a generator expression; similar to list comprehensions, but using parentheses instead of square brackets
gen_exp = (x for x in range(5))
print(gen_exp)
# extracting each value in the list generated by range(5), one value at a time; raises StopIteration when the sequence is exhausted
print(type(gen_exp))
print(next(gen_exp))
print(next(gen_exp))
print(next(gen_exp))
print(next(gen_exp))
print(next(gen_exp))



def this_func(x, y):
    for i in range(5):
        yield x * i/y

a = this_func(5, 10)

print(type(a))