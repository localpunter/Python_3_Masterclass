import psycopg2

#Opening the text file for reading
f = open("C:\\Users\\local_4nmktoc\\Documents\\Coding\\Python\\Python_3_MasterClass\\Section 20 Automate Database Tasks\\employees.txt")

#Creating an empty list for storing the records as a lis of lists
records = []

#Splitting each line in the file by the "/ " delimiter and appending each list generated by readlines() to the new list, records 
for record in f.readlines():
    records.append(record.split("/ "))
# print(i)

#Connecting to the database
try:
    connection = psycopg2.connect(
        database="staff", user="alan", password="python", host="127.0.0.1", port="5432")

except psycopg2.Error as err:
    print("An error occurred when connecting to the database!")

else:
    print("Connection to database successful!\n")

#Initializing the cursor
cursor = connection.cursor()

#Iterating over the records list and, for each inner list, extracting the data associated with each of the 7 columns in the table using indexes and inserting the data in the table using the INSERT command
try:
    for record in records:
        cursor.execute("insert into mystaff.employees(id,first_name,last_name,department,phone,address,salary) values (%s, %s, %s, %s, %s, %s, %s);",
        (record[0], record[1], record[2], record[3], record[4], record[5], record[6]))

except psycopg2.Error as err:
    print("An error occurred while inserting records!")

else:
    print("Records inserted successfully!\n")

# Commiting (saving) the changes/transactions performed since the last commit()
connection.commit()

# Closing the connection to the database
connection.close()

# # This creates the table and only requires to be run once
# cursor.execute("""create table mystaff.employees
#         (id int primary key not null,
#         first_name varchar(255) not null,
#         last_name varchar(255) not null,
#         department varchar(255) not null,
#         phone varchar(255),
#         address varchar(255),
#         salary int);""")


# This is how we insert data into the table
# cursor.execute("insert into mystaff.employees (id, first_name, last_name, department, phone, address, salary) \
#     values  (1, 'Rachel', 'Hunter', 'Digital Marketing', '07757123123', '24 Kings Road, Rosyth', 45000), \
#             (2, 'Alan', 'Hunter', 'Entrepeneur', '07738123123', '24 Kings Road, Rosyth', 25000), \
#             (3, 'John', 'McLean', 'Bad Ass Carpenter', '+6421123123', '11 Titoki Crescent, Napier', 30000), \
#             (4, 'Bob', 'Hunter', 'Fireman', '07776123123', '11 Lindores Drive, Kirkcaldy', 35000), \
#             (5, 'Helen', 'McLean', 'Nursery Teacher', '+6421321321', 'Somewhere in, Taradale', 33000);")


# # This is how we update records in the table
# cursor.execute("update mystaff.employees set department = 'Genius' where first_name = 'Alan';")


# # This is how we delete records from the table
# cursor.execute("delete from mystaff.employees where salary between 30000 and 40000;")

# Adding the deleted records again
# cursor.execute("insert into mystaff.employees (id, first_name, last_name, department, phone, address, salary) \
#     values  (4, 'Bob', 'Hunter', 'Fireman', '07776123123', '11 Lindores Drive, Kirkcaldy', 35000), \
#             (5, 'Helen', 'McLean', 'Nursery Teacher', '+6421321321', 'Somewhere in, Taradale', 33000);")


# # This is how we query the database
# cursor.execute("select * from mystaff.employees where salary < 35000;")
# records = cursor.fetchall()
# for record in records:
#     print("This will return salaries less than 35000", record)

# # print(records)
# print(" ")


# cursor.execute("select * from mystaff.employees where salary between 30000 and 40000;")
# records = cursor.fetchall()
# for record in records:
#     print("This will return salaries between 30000 and 40000", record)


# print(" ")


# cursor.execute("select * from mystaff.employees where department in ('Fireman', 'Bad Ass Carpenter');")
# records = cursor.fetchall()
# for record in records:
#     print("This will return employees who are a Fireman and Carpenter", record)


# print(" ")


# cursor.execute("select * from mystaff.employees where last_name like 'H%';")
# records = cursor.fetchall()
# for record in records:
#     print("This will return employees who's last name begins with H", record)


# cursor.execute("select * from mystaff.employees where salary between 30000 and 40000;")
# records = cursor.fetchone()
# for record in records:
#     print("This will return the first salary between 30000 and 40000", record)


# records = cursor.fetchone()
# for record in records:
#     print("And this will return the second salary between 30000 and 40000", record)


# records = cursor.fetchone()
# for record in records:
#     print("And this will return the third salary between 30000 and 40000", record)


# records = cursor.fetchone()
# for record in records:
#     print("And this will return an error as there are no more records", record)


# cursor.execute("select * from mystaff.employees where salary between 30000 and 40000;")
# records = cursor.fetchmany(size=2)
# for record in records:
#     print("This will return the first 2 salaries between 30000 and 40000", record)


# # This add a new record to the table
# cursor.execute("insert into mystaff.employees (id, first_name, last_name, department, phone, address, salary) \
#      values  (6, 'Liam', 'Hunter', 'Postie', '07776321321', '27 Cheviot Road, Kirkcaldy', 22000);")


# # This returns each record as a tuple
# cursor.execute("select * from mystaff.employees;")
# records = cursor.fetchall()
# for record in records:
#     print(record)

# # This shows the type is a tuple
# print(type(record))

# Rolling back (undoing) the changes/transactions performed since the last commit()
# connection.rollback()

# cursor.execute("select * from mystaff.employees;")
# records = cursor.fetchall()
# for record in records:
#     print(record)



# Commiting (saving) the changes/transactions performed since the last commit()
# connection.commit()

# Closing the connection to the database
# connection.close()


# ALTER TABLE mystaff.employees
#   ALTER COLUMN address SET DATA TYPE varchar(255)
#   USING address::varchar(255);
